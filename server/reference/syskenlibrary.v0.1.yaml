openapi: 3.0.0
info:
  title: SyskenLibrary
  version: '0.1'
  description: シス研の蔵書を管理するためのAPIです
  contact:
    name: TokihiroNakahara
  license:
    name: MIT
paths:
  /books:
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  books:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book-with-id'
              examples:
                example-1:
                  value:
                    books:
                      - title: sample_book
                        author: sample_author
                        isbn: null
                      - title: sample_book2
                        author: sample_author
                        isbn: '9783161484100'
      operationId: get-books
      description: すべての書籍のデータを返す
      summary: get all books
    post:
      operationId: post-books
      responses:
        '201':
          description: Created
          headers: {}
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
            examples:
              example-1:
                value:
                  title: sample_book
                  author: sample_author
                  isbn: 9783161484100
        description: 登録する本のデータ
      description: 新しい書籍を登録する
      summary: register new book
  /users:
    get:
      summary: get all users
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: email
                items:
                  type: object
                  properties:
                    email:
                      type: string
              examples:
                example-1:
                  value:
                    - email: foo@bar.com
                    - email: foo2@bar.com
      operationId: get-users
      description: すべてのユーザーを取得する
      requestBody: {}
    post:
      summary: register new user
      tags: []
      operationId: post-users
      responses:
        '201':
          description: Created
          headers:
            Location:
              schema:
                type: string
              description: ''
      description: 新しいユーザーを登録する
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              example-1:
                value:
                  email: foo@bar.com
                  password: password
          application/xml:
            schema:
              type: object
              properties: {}
            examples:
              example:
                value:
                  email: foo@bar.com
                  password: password
    delete:
      summary: delete all user
      tags: []
      operationId: delete-users
      responses:
        '204':
          description: No Content
      description: すべてのユーザーを削除する
  /login:
    post:
      summary: login
      operationId: post-login
      description: emailとpasswordでログインする
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: ''
                properties:
                  token:
                    type: string
              examples:
                example-1:
                  value:
                    token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJTeXNrZW5MaWJyYXkiLCJzdWIiOjI2MSwiaWF0IjoxNTgyNTE4MTc0LCJleHAiOjE1ODI1Mjg5NzR9.g5g66qUO4hJBnTbUuMxSOXRWBPLkrkCrHpKYA413j8A
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              example-1:
                value:
                  email: foo@bar.com
                  password: password
components:
  schemas:
    Book:
      title: Book
      type: object
      properties:
        title:
          type: string
        author:
          type: string
        isbn:
          type: integer
      required:
        - title
    Book-with-id:
      title: Book-with-id
      allOf:
        - type: object
          properties:
            id:
              type: integer
          required:
            - id
        - $ref: '#/components/schemas/Book'
    User:
      title: User
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          minLength: 5
          maxLength: 30
      required:
        - email
        - password
  securitySchemes: {}
servers:
  - url: 'http://localhost:3001'
    description: ''
