openapi: 3.0.0
info:
  title: SyskenLibrary
  version: '0.1'
  description: シス研の蔵書を管理するためのAPIです
  contact:
    name: TokihiroNakahara
  license:
    name: MIT
paths:
  /books:
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  books:
                    type: array
                    items:
                      $ref: '#/components/schemas/BookWithLoan'
              examples:
                example-1:
                  value:
                    books:
                      - title: sample_book
                        author: sample_author
                        isbn: null
                        borrowedBy: 1
                        borrowedAt: '2020-03-27T02:57:06.105Z'
                      - title: sample_book2
                        author: sample_author
                        isbn: '9783161484100'
                        borrowedBy: null
                        borrowedAt: null
      operationId: get-books
      description: すべての書籍のデータを返す
      summary: get all books
      parameters: []
    post:
      operationId: post-books
      responses:
        '201':
          description: Created
          headers: {}
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
            examples:
              example-1:
                value:
                  title: sample_book
                  author: sample_author
                  isbn: 9783161484100
        description: 登録する本のデータ
      description: 新しい書籍を登録する
      summary: register new book
      security:
        - bearerAuth: []
      parameters: []
    delete:
      summary: delete all books
      operationId: delete-books
      responses:
        '204':
          description: No Content
      description: すべての書籍データを削除する
  /users:
    get:
      summary: get all users
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: email
                items:
                  type: object
                  properties:
                    email:
                      type: string
              examples:
                example-1:
                  value:
                    - email: foo@bar.com
                    - email: foo2@bar.com
      operationId: get-users
      description: すべてのユーザーを取得する
      requestBody: {}
    post:
      summary: register new user
      tags: []
      operationId: post-users
      responses:
        '201':
          description: Created
          headers:
            Location:
              schema:
                type: string
              description: ''
      description: 新しいユーザーを登録する
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              example-1:
                value:
                  email: foo@bar.com
                  password: password
        description: 登録するユーザーのデータ
    delete:
      summary: delete all user
      tags: []
      operationId: delete-users
      responses:
        '204':
          description: No Content
      description: すべてのユーザーを削除する
  /login:
    post:
      summary: login
      operationId: post-login
      description: emailとpasswordでログインする
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: ''
                properties:
                  token:
                    type: string
              examples:
                example-1:
                  value:
                    token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJTeXNrZW5MaWJyYXkiLCJzdWIiOjI2MSwiaWF0IjoxNTgyNTE4MTc0LCJleHAiOjE1ODI1Mjg5NzR9.g5g66qUO4hJBnTbUuMxSOXRWBPLkrkCrHpKYA413j8A
        '401':
          description: Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              example-1:
                value:
                  email: foo@bar.com
                  password: password
  '/users/{id}':
    parameters:
      - schema:
          type: string
          pattern: '(me|[0-9]+)'
        name: id
        in: path
        required: true
        description: ''
    get:
      summary: get user data
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: ユーザーのId
                  email:
                    type: string
                    description: ユーザーのメールアドレス
                  loans:
                    type: array
                    description: 貸出情報のリスト
                    items:
                      type: object
                      description: 貸出情報を表すオブジェクト
                      properties:
                        id:
                          type: integer
                          description: 貸出Id
                        bookId:
                          type: integer
                          description: 借りている本のId
                        createdAt:
                          type: string
                          description: 本を借りた日を表す文字列
              examples:
                example-1:
                  value:
                    id: 1
                    email: foo@bar.com
                    loans:
                      - id: 1
                        bookId: 20
                        createdAt: '2020-03-31T10:52:49.939Z'
                      - id: 2
                        bookId: 21
                        createdAt: '2020-03-31T10:54:10.391Z'
                example-2:
                  value:
                    id: 1
                    email: foo@bar.com
                    loans: []
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: get-users-id
      description: ユーザーのデータを取得する
      security:
        - bearerAuth: []
  '/users/{id}/loans':
    parameters:
      - schema:
          type: string
          pattern: '(me|[0-9]+)'
        name: id
        in: path
        required: true
        description: ''
    post:
      summary: borrow a book
      operationId: post-users-id-loans
      responses:
        '201':
          description: Created
          headers:
            Location:
              schema:
                type: string
              description: 作成された貸出情報を示すURL
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      description: 本のIdを指定して本を借りる
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bookId:
                  type: integer
                  description: 借りたい本のId
              required:
                - bookId
            examples:
              example-1:
                value:
                  bookId: 1
        description: 本の借りるための情報
      security:
        - bearerAuth: []
components:
  schemas:
    Book:
      title: Book
      type: object
      x-examples:
        example-1:
          title: sample_book
          author: sample_author
          isbn: 9783161484100
        example-2:
          title: sample_book
          author: sample_author
          isbn: null
        example-3:
          title: sample_book
          author: null
          isbn: null
      properties:
        title:
          type: string
          description: 本のタイトル
        author:
          oneOf:
            - type: string
            - type: 'null'
          description: 本の著者
        isbn:
          oneOf:
            - type: integer
            - type: 'null'
          description: 本のISBN
      required:
        - title
    User:
      title: User
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          minLength: 5
          maxLength: 30
      required:
        - email
        - password
    BookWithLoan:
      title: ''
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: 本のId
        - $ref: '#/components/schemas/Book'
        - type: object
          properties:
            borrowedBy:
              type:
                - number
                - 'null'
              description: 本を借りた人のId
            borrowedAt:
              type:
                - string
                - 'null'
              description: 本が借りられた日付
      description: ''
      x-examples:
        example-1:
          title: sample_book
          author: sample_author
          isbn: null
          borrowedBy: 1
          borrowedAt: '020-03-27T02:57:06.105Z'
        example-2:
          title: sample_book2
          author: sample_author
          isbn: '9783161484100'
          borrowedBy: null
          borrowedAt: null
    ErrorResponse:
      title: ErrorResponse
      type: object
      properties:
        error:
          type: object
          description: 発生したエラー
          properties:
            message:
              type: string
              description: エラーの詳細
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
servers:
  - url: 'http://localhost:3001'
    description: ''
